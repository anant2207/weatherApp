{"version":3,"sources":["apiKeys.js","images/WeatherIcons.gif","forcast.js","currentLocation.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","key","base","Forcast","props","_useState","useState","_useState2","_slicedToArray","query","setQuery","_useState3","_useState4","error","setError","_useState5","_useState6","weather","setWeather","searchInputRef","useRef","search","city","axios","get","concat","apiKeys","then","response","data","catch","console","log","message","useEffect","current","focus","defaults","React","createElement","className","ReactAnimatedWeather","icon","color","size","animate","type","placeholder","onChange","e","target","value","onKeyPress","event","ref","src","onClick","alt","main","name","sys","country","Math","round","temp","humidity","visibility","wind","speed","_regeneratorRuntime","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","arg","call","h","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","resolve","__await","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","Weather","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","args","Array","_key","apply","state","lat","undefined","lon","errorMessage","temperatureC","temperatureF","description","sunrise","sunset","errorMsg","getWeather","_ref","_asyncToGenerator","_callee","api_call","_context","fetch","json","setState","t0","_x","_x2","_createClass","_this2","latitude","longitude","err","alert","this","timerID","setInterval","clearInterval","Fragment","id","Clock","format","interval","ticking","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","loader","style","width","WebkitUserDrag","fontSize","fontWeight","marginTop","Component","App","CurrentLocation","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2bb7bdd6.chunk.js","sourcesContent":["// Visit https://api.openweathermap.org & then signup to get our API keys for free\nmodule.exports = {\n  key: \"6043c565b351c0f25e247dd79b4d4d19\",\n  base: \"https://api.openweathermap.org/data/2.5/\",\n};\n","module.exports = __webpack_public_path__ + \"static/media/WeatherIcons.0a218296.gif\";","import React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport apiKeys from \"./apiKeys\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\n\nfunction Forcast(props) {\n  const [query, setQuery] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [weather, setWeather] = useState({});\n  const searchInputRef = useRef(null);\n\n  const search = (city) => {\n    axios\n      .get(\n        `${apiKeys.base}weather?q=${\n          city !== \"[object Object]\" ? city : query\n        }&units=metric&APPID=${apiKeys.key}`\n      )\n      .then((response) => {\n        setWeather(response.data);\n        setQuery(\"\");\n      })\n      .catch(function (error) {\n        console.log(error);\n        setWeather(\"\");\n        setQuery(\"\");\n        setError({ message: \"Not Found\", query: query });\n      });\n  };\n\n  const handleKeyPress = (event) => {\n    if (event.key === \"Enter\") {\n      search(query);\n    }\n  };\n\n  useEffect(() => {\n    search(\"Delhi\");\n    searchInputRef.current.focus();\n  }, []);\n\n  const defaults = {\n    color: \"white\",\n    size: 112,\n    animate: true,\n  };\n\n  return (\n    <div className=\"forecast\">\n      <div className=\"forecast-icon\">\n        <ReactAnimatedWeather\n          icon={props.icon}\n          color={defaults.color}\n          size={defaults.size}\n          animate={defaults.animate}\n        />\n      </div>\n      <div className=\"today-weather\">\n        <h3>{props.weather}</h3>\n        <div className=\"search-box\">\n          <input\n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Search any city\"\n            onChange={(e) => setQuery(e.target.value)}\n            onKeyPress={handleKeyPress}\n            value={query}\n            ref={searchInputRef}\n          />\n          <div className=\"img-box\">\n            <img\n              src=\"https://images.avishkaar.cc/workflow/newhp/search-white.png\"\n              onClick={() => search(query)}\n              alt=\"Search\"\n            />\n          </div>\n        </div>\n        <ul>\n          {typeof weather.main !== \"undefined\" ? (\n            <div>\n              {\" \"}\n              <li className=\"cityHead\">\n                <p>\n                  {weather.name}, {weather.sys.country}\n                </p>\n                <img\n                  className=\"temp\"\n                  src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}.png`}\n                  alt=\"Weather Icon\"\n                />\n              </li>\n              <li>\n                Temperature{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.main.temp)}°C ({weather.weather[0].main})\n                </span>\n              </li>\n              <li>\n                Humidity{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.main.humidity)}%\n                </span>\n              </li>\n              <li>\n                Visibility{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.visibility)} mi\n                </span>\n              </li>\n              <li>\n                Wind Speed{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.wind.speed)} Km/h\n                </span>\n              </li>\n            </div>\n          ) : (\n            <li>\n              {error.query} {error.message}\n            </li>\n          )}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default Forcast;\n","import React, { Component } from \"react\";\nimport apiKeys from \"./apiKeys\";\nimport Clock from \"react-live-clock\";\nimport Forcast from \"./forcast\";\nimport loader from \"./images/WeatherIcons.gif\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\n\nconst dateBuilder = (d) => {\n  const months = [\n    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\n    \"August\", \"September\", \"October\", \"November\", \"December\",\n  ];\n  const days = [\n    \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\",\n  ];\n\n  const day = days[d.getDay()];\n  const date = d.getDate();\n  const month = months[d.getMonth()];\n  const year = d.getFullYear();\n\n  return `${day}, ${date} ${month} ${year}`;\n};\n\nconst defaults = {\n  color: \"white\",\n  size: 112,\n  animate: true,\n};\n\nclass Weather extends Component {\n  state = {\n    lat: undefined,\n    lon: undefined,\n    errorMessage: undefined,\n    temperatureC: undefined,\n    temperatureF: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    icon: \"CLEAR_DAY\",\n    sunrise: undefined,\n    sunset: undefined,\n    errorMsg: undefined,\n  };\n\n  componentDidMount() {\n    // Get approximate location using IP address\n    fetch(\"https://ipapi.co/json/\")\n      .then((response) => response.json())\n      .then((data) => {\n        this.getWeather(data.latitude, data.longitude);\n      })\n      .catch((err) => {\n        this.getWeather(28.67, 77.22); // Default location if IP-based location fails\n        alert(\n          \"Failed to fetch approximate location. Using default location for calculating Real-time weather.\"\n        );\n      });\n\n    this.timerID = setInterval(\n      () => this.getWeather(this.state.lat, this.state.lon),\n      600000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  getWeather = async (lat, lon) => {\n    const api_call = await fetch(\n      `${apiKeys.base}weather?lat=${lat}&lon=${lon}&units=metric&APPID=${apiKeys.key}`\n    );\n    const data = await api_call.json();\n    this.setState({\n      lat: lat,\n      lon: lon,\n      city: data.name,\n      temperatureC: Math.round(data.main.temp),\n      temperatureF: Math.round(data.main.temp * 1.8 + 32),\n      humidity: data.main.humidity,\n      main: data.weather[0].main,\n      country: data.sys.country,\n    });\n    switch (this.state.main) {\n      case \"Haze\":\n        this.setState({ icon: \"CLEAR_DAY\" });\n        break;\n      case \"Clouds\":\n        this.setState({ icon: \"CLOUDY\" });\n        break;\n      case \"Rain\":\n        this.setState({ icon: \"RAIN\" });\n        break;\n      case \"Snow\":\n        this.setState({ icon: \"SNOW\" });\n        break;\n      case \"Dust\":\n        this.setState({ icon: \"WIND\" });\n        break;\n      case \"Drizzle\":\n        this.setState({ icon: \"SLEET\" });\n        break;\n      case \"Fog\":\n        this.setState({ icon: \"FOG\" });\n        break;\n      case \"Smoke\":\n        this.setState({ icon: \"FOG\" });\n        break;\n      case \"Tornado\":\n        this.setState({ icon: \"WIND\" });\n        break;\n      default:\n        this.setState({ icon: \"CLEAR_DAY\" });\n    }\n  };\n\n  render() {\n    if (this.state.temperatureC) {\n      return (\n        <React.Fragment>\n          <div className=\"city\">\n            <div className=\"title\">\n              <h2>{this.state.city}</h2>\n              <h3>{this.state.country}</h3>\n            </div>\n            <div className=\"mb-icon\">\n              <ReactAnimatedWeather\n                icon={this.state.icon}\n                color={defaults.color}\n                size={defaults.size}\n                animate={defaults.animate}\n              />\n              <p>{this.state.main}</p>\n            </div>\n            <div className=\"date-time\">\n              <div className=\"dmy\">\n                <div id=\"txt\"></div>\n                <div className=\"current-time\">\n                  <Clock format=\"HH:mm:ss\" interval={1000} ticking={true} />\n                </div>\n                <div className=\"current-date\">{dateBuilder(new Date())}</div>\n              </div>\n              <div className=\"temperature\">\n                <p>\n                  {this.state.temperatureC}°<span>C</span>\n                </p>\n              </div>\n            </div>\n          </div>\n          <Forcast icon={this.state.icon} weather={this.state.main} />\n        </React.Fragment>\n      );\n    } else {\n      return (\n        <React.Fragment>\n          <img\n            src={loader}\n            alt=\"Loading...\"\n            style={{ width: \"50%\", WebkitUserDrag: \"none\" }}\n          />\n          <h3 style={{ color: \"white\", fontSize: \"22px\", fontWeight: \"600\" }}>\n            Detecting your location\n          </h3>\n          <h3 style={{ color: \"white\", marginTop: \"10px\" }}>\n            Your current location will be displayed on the App <br />\n            and used for calculating Real-time weather.\n          </h3>\n        </React.Fragment>\n      );\n    }\n  }\n}\n\nexport default Weather;\n","import React from \"react\";\nimport CurrentLocation from \"./currentLocation\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <CurrentLocation />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}